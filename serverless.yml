org: alexs29
app: agendazap
service: agendazap-backend

provider:
  name: aws
  runtime: nodejs20.x
  stage: ${opt:stage, 'dev'}
  region: us-east-1
  httpApi:
    cors: true
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - dynamodb:Query
            - dynamodb:Scan
            - dynamodb:GetItem
            - dynamodb:PutItem
            - dynamodb:UpdateItem
            - dynamodb:DeleteItem
          Resource:
            - Fn::GetAtt: [UsersTable, Arn]
            - Fn::Join:
              - ""
              - - Fn::GetAtt: [ UsersTable, Arn ]
                - "/index/EmailIndex"
            - Fn::GetAtt: [surveyStates, Arn]
            - Fn::GetAtt: [PatientsTable, Arn]
            - Fn::GetAtt: [NutricionistasTable, Arn]

  environment:
    USERS_TABLE: users-table-${self:provider.stage}
    PATIENTS_TABLE: PatientsTable-${self:provider.stage}
    NUTRICIONISTAS_TABLE: NutricionistasTable-${self:provider.stage}
    JWT_SECRET: dev_jwt_secret
    GOOGLE_CLIENT_ID: ${env:GOOGLE_CLIENT_ID}
    GOOGLE_CLIENT_SECRET: ${env:GOOGLE_CLIENT_SECRET}
    ACCOUNT_SID_TWILIO: ${env:ACCOUNT_SID_TWILIO}
    AUTH_TOKEN_TWILIO: ${env:AUTH_TOKEN_TWILIO}

functions:
  api:
    handler: handler.app
    events:
      - httpApi: "*"

  checkEvents:
    handler: handler.checkEvents
    events:
      - schedule:
          rate: rate(1 day)
      - http:
          path: checkEvents
          method: get

  googleCalendarAuth:
    handler: handler.googleCalendarAuth
    events:
      - http:
          path: google/auth
          method: get

  oauth2callback:
    handler: handler.oauth2callback
    events:
      - http:
          path: oauth2callback
          method: get

  createEvent:
    handler: handler.createEvent
    events:
      - http:
          path: events
          method: post

  listEvents:
    handler: handler.listEvents
    events:
      - http:
          path: events
          method: get

  updateEvent:
    handler: handler.updateEvent
    events:
      - http:
          path: events/{id}
          method: put

  deleteEvent:
    handler: handler.deleteEvent
    events:
      - http:
          path: events/{id}
          method: delete

  sendConfirmation2Days:
    handler: handler.sendConfirmation2Days
    events:
      - http:
          path: confirmation2days/send
          method: get

  sendConfirmation7Days:
    handler: handler.sendConfirmation7Days
    events:
      - http:
          path: confirmation7days/send
          method: get

  sendSupportNotifications:
    handler: handler.sendSupportNotifications
    events:
      - http:
          path: support/send
          method: get

  demoReply:
    handler: handler.demoReply
    events:
      - http:
          path: demo-reply
          method: post

resources:
  Resources:
    UsersTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: users-table-${self:provider.stage}
        AttributeDefinitions:
          - AttributeName: userId
            AttributeType: S
          - AttributeName: email
            AttributeType: S
        KeySchema:
          - AttributeName: userId
            KeyType: HASH
        GlobalSecondaryIndexes:
          - IndexName: EmailIndex
            KeySchema:
              - AttributeName: email
                KeyType: HASH
            Projection:
              ProjectionType: ALL
        BillingMode: PAY_PER_REQUEST

    PatientsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: PatientsTable-${self:provider.stage}
        AttributeDefinitions:
          - AttributeName: PK
            AttributeType: S
          - AttributeName: SK
            AttributeType: S
          - AttributeName: telefone_whatsapp
            AttributeType: S
        KeySchema:
          - AttributeName: PK
            KeyType: HASH
          - AttributeName: SK
            KeyType: RANGE
        GlobalSecondaryIndexes:
          - IndexName: ByTelefone
            KeySchema:
              - AttributeName: telefone_whatsapp
                KeyType: HASH
            Projection:
              ProjectionType: ALL
        BillingMode: PAY_PER_REQUEST

    NutricionistasTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: NutricionistasTable-${self:provider.stage}
        AttributeDefinitions:
          - AttributeName: PK
            AttributeType: S
          - AttributeName: SK
            AttributeType: S
        KeySchema:
          - AttributeName: PK
            KeyType: HASH
          - AttributeName: SK
            KeyType: RANGE
        BillingMode: PAY_PER_REQUEST

    surveyStates:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: surveyStates
        AttributeDefinitions:
          - AttributeName: phone
            AttributeType: S
        KeySchema:
          - AttributeName: phone
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST

plugins:
  - serverless-offline
