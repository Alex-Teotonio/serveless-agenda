org: alexs29
app: agendazap
service: agendazap-backend

provider:
  name: aws
  runtime: nodejs20.x
  stage: ${opt:stage, 'dev'}
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - dynamodb:Query
            - dynamodb:Scan
            - dynamodb:GetItem
            - dynamodb:PutItem
            - dynamodb:UpdateItem
            - dynamodb:DeleteItem
          Resource:
            - Fn::GetAtt: [UsersTable, Arn]
            - Fn::GetAtt: [AgendazapTable, Arn]
  environment:
    USERS_TABLE: ${self:custom.tableName}
    AGENDAZAP_TABLE: AgendazapTable-${self:provider.stage}
    JWT_SECRET: "dev_jwt_secret"
    GOOGLE_CLIENT_ID: "${env:GOOGLE_CLIENT_ID}"
    GOOGLE_CLIENT_SECRET: "${env:GOOGLE_CLIENT_SECRET}"

custom:
  tableName: "users-table-${self:provider.stage}"

functions:
  api:
    handler: handler.app
    events:
      - httpApi: "*"
    environment:
      USERS_TABLE: ${self:custom.tableName}
      AGENDAZAP_TABLE: AgendazapTable-${self:provider.stage}
  googleCalendarAuth:
    handler: handler.googleCalendarAuth
    events:
      - http:
          path: google/auth
          method: get
  createEvent:
    handler: handler.createEvent
    events:
      - http:
          path: events
          method: post

  updateEvent:
    handler: handler.updateEvent
    events:
      - http:
          path: events/{id}
          method: put

  deleteEvent:
    handler: handler.deleteEvent
    events:
      - http:
          path: events/{id}
          method: delete
  oauth2callback:
    handler: handler.oauth2callback
    events:
      - http:
          path: oauth2callback
          method: get

resources:
  Resources:
    UsersTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: userId
            AttributeType: S
          - AttributeName: email
            AttributeType: S
        KeySchema:
          - AttributeName: userId
            KeyType: HASH
        GlobalSecondaryIndexes:
          - IndexName: EmailIndex
            KeySchema:
              - AttributeName: email
                KeyType: HASH
            Projection:
              ProjectionType: ALL
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:custom.tableName}
    AgendazapTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: AgendazapTable-${self:provider.stage}
        AttributeDefinitions:
          - AttributeName: PK
            AttributeType: S
          - AttributeName: SK
            AttributeType: S
        KeySchema:
          - AttributeName: PK
            KeyType: HASH
          - AttributeName: SK
            KeyType: RANGE
        BillingMode: PAY_PER_REQUEST

plugins:
  - serverless-offline
